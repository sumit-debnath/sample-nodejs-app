pipeline{
    agent any
    options {
        buildDiscarder logRotator(numToKeepStr: '3')
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('sumit-dockerhub')
        IMAGE_NAME = 'sdnath/simple-nodeapp-sd'
    } 
    parameters{
        string defaultValue: 'main', name: 'Branch'
        string defaultValue: '', name: 'Image_Tag'
        
    }
    stages {
        stage('Clean WS') {
            steps{
                cleanWs()
            }
        }
        stage('Git Checkout'){
            steps{
                git branch: '$Branch', url: 'https://github.com/sumit-debnath/sample-nodejs-app.git'
            }
        }
        stage('Docker Build') {
            steps{
                script {
                    if (params.Image_Tag == '') {
                        // echo "Build Number: ${currentBuild.number}"
                        NEW_IMAGE_NAME = "${IMAGE_NAME}:dev_${currentBuild.number}"
                        sh "docker build -t ${NEW_IMAGE_NAME} ."
                    } else {
                        NEW_IMAGE_NAME = "${IMAGE_NAME}:${params.Image_Tag}"
                        sh "docker build -t ${NEW_IMAGE_NAME} ."
                        // echo "Parameter Value: ${params.Image_Tag}"
                    }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                // sh "trivy --no-progress --exit-code 1 --severity HIGH,CRITICAL ${NEW_IMAGE_NAME}"
                sh "trivy --no-progress --severity HIGH,CRITICAL ${NEW_IMAGE_NAME}"
                
            }
        }
        stage('Docker Login') {
            steps{
                sh ''' echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'''
            }
        }
        stage('Docker Push') {
            steps {
                sh "docker push ${NEW_IMAGE_NAME}"
            }
        }
        stage('Deploy') {
            steps {
                // ansiblePlaybook playbook: 'ansible/playbook.yml', vaultTmpPath: ''
                ansiblePlaybook extras: "-e 'IMAGE_NAME= ${NEW_IMAGE_NAME}'", playbook: 'ansible/playbook.yml'
            }
        }
        // Testing Image removal from local
        stage('Remove Old Docker Images') {
            steps {
                script {
                    def imagesToRemove = sh(script: 'docker images --format "{{.ID}} {{.Repository}}:{{.Tag}}"', returnStdout: true).trim().split('\n')
                    imagesToRemove.each { image ->
                        if (!image.contains(NEW_IMAGE_NAME)) {
                            sh "docker rmi -f $image"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout'
        }
    }
}